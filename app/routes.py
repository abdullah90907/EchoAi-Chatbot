from flask import Blueprint, render_template, request, jsonify, current_app
import os
from groq import Groq

main = Blueprint('main', __name__)

def get_groq_client():
    """Get Groq client with API key from config"""
    api_key = current_app.config.get('GROQ_API_KEY')
    if not api_key:
        raise ValueError("GROQ_API_KEY not found in configuration")
    print(f"Using API key: {api_key[:20]}...")  # Debug log
    return Groq(api_key=api_key)

def get_fallback_response(content_type, prompt):
    """Provide fallback response when API is not available"""
    fallback_responses = {
        "Instagram Caption": f"ðŸŒŸ {prompt} âœ¨\n\n#AI #Innovation #EchoAI #SocialMedia #Tech",
        "LinkedIn Post": f"ðŸ’¼ {prompt}\n\nThis is an example of professional content that could be generated. Connect with us to see EchoAI in action!\n\n#LinkedIn #Professional #AI #EchoAI",
        "Facebook Post": f"ðŸ‘‹ {prompt}\n\nThis is a sample Facebook post generated by EchoAI. Like and share if you're excited about AI-powered content creation!\n\n#Facebook #AI #EchoAI"
    }
    return fallback_responses.get(content_type, f"Sample {content_type.lower()}: {prompt}")

def get_fallback_analysis(analysis_type, text):
    """Provide fallback analysis when API is not available"""
    if analysis_type == 'sentiment':
        return "Sample Analysis: The text appears to have a neutral to positive sentiment. This is a demonstration of what EchoAI's sentiment analysis would provide with a valid API key."
    elif analysis_type == 'summary':
        return f"Sample Summary: This is a demonstration summary of your text. The main points would be extracted and summarized here. Text length: {len(text)} characters."
    elif analysis_type == 'keywords':
        words = text.split()[:5]
        return f"Sample Keywords: {', '.join(words)}. These would be the main keywords extracted from your text."
    else:
        return "Sample Analysis: This demonstrates EchoAI's text analysis capabilities. With a valid API key, you would get detailed insights here."

@main.route('/')
def home():
    """Home page with all features overview"""
    return render_template('home.html')

@main.route('/content-generator')
def content_generator():
    """Social media content generator page"""
    return render_template('content_generator.html')

@main.route('/text-analyzer')
def text_analyzer():
    """Text analysis page"""
    return render_template('text_analyzer.html')

@main.route('/chat-assistant')
def chat_assistant():
    """AI chat assistant page"""
    return render_template('chat_assistant.html')

@main.route('/debug/config')
def debug_config():
    """Debug endpoint to check configuration"""
    api_key = current_app.config.get('GROQ_API_KEY')
    return jsonify({
        'api_key_present': bool(api_key),
        'api_key_preview': api_key[:20] + '...' if api_key else 'None',
        'config_keys': list(current_app.config.keys())
    })

@main.route('/api/generate-content', methods=['POST'])
def api_generate_content():
    """API endpoint for generating social media content"""
    try:
        data = request.get_json()
        prompt = data.get('prompt', '')
        content_type = data.get('content_type', 'Tweet')
        brand_voice = data.get('brand_voice', 'Professional')
        max_length = data.get('max_length', 150)
        
        if not prompt:
            return jsonify({'error': 'Prompt is required'}), 400
        
        # Generate brand voice prompt
        voice_dict = {
            "Professional": "Write in a professional and formal tone.",
            "Casual": "Write in a casual and friendly tone.",
            "Witty": "Write with a witty and humorous tone.",
            "Inspirational": "Write in an inspiring and uplifting tone."
        }
        
        enhanced_prompt = f"{voice_dict[brand_voice]} Create a {content_type.lower()} with maximum {max_length} characters: {prompt}"
        
        # Generate content using Groq
        try:
            client = get_groq_client()
            chat_completion = client.chat.completions.create(
                messages=[{"role": "user", "content": enhanced_prompt}],
                model="llama3-8b-8192"
            )
            generated_content = chat_completion.choices[0].message.content
        except Exception as api_error:
            # Use fallback response if API fails
            print(f"API Error: {api_error}")
            generated_content = get_fallback_response(content_type, prompt)
        
        return jsonify({
            'success': True,
            'content': generated_content,
            'content_type': content_type,
            'brand_voice': brand_voice
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@main.route('/api/analyze-text', methods=['POST'])
def api_analyze_text():
    """API endpoint for text analysis"""
    try:
        data = request.get_json()
        text = data.get('text', '')
        analysis_type = data.get('analysis_type', 'sentiment')
        
        if not text:
            return jsonify({'error': 'Text is required'}), 400
        
        if analysis_type == 'sentiment':
            prompt = f"Analyze the sentiment of this text and provide a detailed analysis with sentiment score (positive, negative, neutral) and explanation: {text}"
        elif analysis_type == 'summary':
            prompt = f"Provide a concise summary of this text: {text}"
        elif analysis_type == 'keywords':
            prompt = f"Extract the main keywords and key phrases from this text: {text}"
        else:
            prompt = f"Analyze this text and provide insights: {text}"
        
        try:
            client = get_groq_client()
            chat_completion = client.chat.completions.create(
                messages=[{"role": "user", "content": prompt}],
                model="llama3-8b-8192"
            )
            analysis_result = chat_completion.choices[0].message.content
        except Exception as api_error:
            # Use fallback response if API fails
            print(f"API Error: {api_error}")
            analysis_result = get_fallback_analysis(analysis_type, text)
        
        return jsonify({
            'success': True,
            'analysis': analysis_result,
            'analysis_type': analysis_type
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@main.route('/api/chat', methods=['POST'])
def api_chat():
    """API endpoint for chat assistant"""
    try:
        data = request.get_json()
        message = data.get('message', '')
        
        if not message:
            return jsonify({'error': 'Message is required'}), 400
        
        try:
            client = get_groq_client()
            chat_completion = client.chat.completions.create(
                messages=[{"role": "user", "content": message}],
                model="llama3-8b-8192"
            )
            response = chat_completion.choices[0].message.content
        except Exception as api_error:
            # Use fallback response if API fails
            print(f"API Error in chat: {api_error}")
            print(f"Error type: {type(api_error).__name__}")
            response = f"Hello! I'm EchoAI's chat assistant. I received your message: '{message}'. With a valid API key, I would provide intelligent responses to help you with questions, brainstorming, and creative tasks. Please check the API configuration to enable full functionality."
        
        return jsonify({
            'success': True,
            'response': response
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500
